{"version":3,"sources":["components/Nav/CreateRoom/CreateRoom.tsx","components/Nav/JoinRoom/JoinRoom.tsx","components/Nav/LeaveRoom/LeaveRoom.tsx","components/Nav/Nav.tsx","components/Chat/Display/MessageDisplayer/MessageDisplayer.tsx","components/Chat/Display/Display.tsx","components/Chat/Input/Input.tsx","components/Chat/Chat.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["CreateRoom","getUsername","globalUserName","useState","show","setShow","history","useHistory","error","setError","inputRef","createRef","handleClose","handleSubmit","event","a","preventDefault","axios","post","process","user","userName","current","value","room","data","console","log","push","id","response","message","Button","variant","onClick","Modal","onHide","Header","closeButton","Title","Alert","onClose","undefined","dismissible","Body","ref","type","placeholder","Footer","JoinRoom","roomId","setRoomId","setUserName","username","err","status","onChange","e","target","LeaveRoom","handleClick","NavBar","getUserName","useParams","Nav","className","ButtonGroup","EmailShareButton","subject","url","window","location","href","EmailIcon","size","round","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","MessageDisplayer","split","map","Display","ws","setMessage","useEffect","onmessage","Input","React","send","sendToServer","Chat","setWs","IDTracker","setID","HOST","replace","WebSocket","Axios","then","catch","close","App","cachedUserName","sessionStorage","getItem","setItem","addEventListener","ev","returnValue","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.877aa552.chunk.js","sourcesContent":["import React, { useState, createRef } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport axios from 'axios'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport interface Room {\r\n    wss: any;\r\n    users: User[]\r\n    id: string\r\n    maxUsers: number\r\n}\r\n\r\nexport interface User {\r\n    username: string\r\n}\r\n\r\nfunction CreateRoom({ getUsername, globalUserName }: { getUsername: Function, globalUserName: string }) {\r\n    const [show, setShow] = useState(false);\r\n    const history = useHistory();\r\n    const [error, setError] = useState()\r\n    const inputRef = createRef<HTMLInputElement>()\r\n\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    const handleSubmit = async (event: any) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            const room: Room = (await axios.post(`${process.env.REACT_APP_API_URL}/createRoom`,\r\n                {\r\n                    user: {\r\n                        userName: inputRef.current?.value\r\n                    }\r\n                }\r\n            )).data\r\n\r\n            console.log('createroom usename val', inputRef.current?.value)\r\n            getUsername(inputRef.current?.value)\r\n            handleClose();\r\n            history.push(`/${room.id}`)\r\n        }\r\n        catch (err) {\r\n            setError(err.response.message || err.message)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                Create Room\r\n            </Button>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create Room</Modal.Title>\r\n                    {error && <Alert variant='danger' onClose={() => { setError(undefined) }} dismissible>\r\n                        {error}\r\n                    </Alert>\r\n                    }\r\n                </Modal.Header>\r\n\r\n\r\n                <Modal.Body>\r\n                    <input ref={inputRef} type='text' placeholder='Enter username'/>\r\n                </Modal.Body>\r\n\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" type='submit' onClick={(event) => handleSubmit(event)}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateRoom","import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport axios from 'axios'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { BsX } from 'react-icons/bs'\r\nimport './JoinRoom.css'\r\n\r\nexport interface Room {\r\n    wss: any;\r\n    users: User[]\r\n    id: string\r\n    maxUsers: number\r\n}\r\n\r\nexport interface User {\r\n    username: string\r\n}\r\n\r\nfunction JoinRoom({ getUsername, globalUserName }: { getUsername: Function, globalUserName: string }) {\r\n    const [show, setShow] = useState(false);\r\n    const history = useHistory();\r\n    const [roomId, setRoomId] = useState('')\r\n    const [userName, setUserName] = useState('')\r\n    const [error, setError] = useState<String>()\r\n\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const handleSubmit = async (event: any) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            axios.post(`${process.env.REACT_APP_API_URL}/joinRoom/${roomId}`,\r\n                {\r\n                    user: {\r\n                        username: userName\r\n                    }\r\n                }\r\n            )\r\n\r\n            handleClose();\r\n            history.push(`/${roomId}`)\r\n            if (userName !== '')\r\n                getUsername(userName)\r\n        }\r\n        catch (err) {\r\n            setError(`Error ${err.response.status}: ${err.response.data}`)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                Join Room\r\n            </Button>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Join Room</Modal.Title>\r\n                    {error && <Alert variant='danger' onClose={() => {setError(undefined)}} dismissible>\r\n                        {error}\r\n                    </Alert>\r\n                    }\r\n\r\n                </Modal.Header>\r\n\r\n\r\n                <Modal.Body>\r\n                    <input type='text' placeholder='Enter username' onChange={(e) => { setUserName(e.target.value) }} />\r\n                    <input type='text' placeholder='Enter room ID' onChange={(e) => setRoomId(e.target.value)} />\r\n                </Modal.Body>\r\n\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" type='submit' onClick={(event) => handleSubmit(event)}>\r\n                        Join\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default JoinRoom","import React from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { useHistory } from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nexport default function LeaveRoom({globalUserName}: {globalUserName:string}) {\r\n\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <Button variant='danger' onClick={() => { handleClick() }}> Leave Room</Button>\r\n    )\r\n\r\n    async function handleClick() {\r\n        //Send leave room request\r\n\r\n        axios.post(`${process.env.REACT_APP_API_URL}/leaveRoom`,\r\n            {\r\n                user: {\r\n                    username: globalUserName\r\n                }\r\n            }\r\n        )\r\n\r\n        history.push('/')\r\n\r\n    }\r\n\r\n}","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport './Nav.css'\r\nimport CreateRoom from './CreateRoom/CreateRoom'\r\nimport JoinRoom from './JoinRoom/JoinRoom'\r\nimport LeaveRoom from './LeaveRoom/LeaveRoom'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport { useParams } from 'react-router-dom';\r\nimport { EmailShareButton, EmailIcon, FacebookShareButton, FacebookIcon, TwitterShareButton, TwitterIcon } from 'react-share'\r\n\r\nfunction NavBar({ getUserName, userName }: { getUserName: Function, userName: string }) {\r\n\r\n    const { roomId } = useParams()\r\n\r\n    return (\r\n        <Nav className='nav'>\r\n            <div className='buttonGroup'>\r\n                <ButtonGroup>\r\n                    <CreateRoom getUsername={getUserName} globalUserName={userName} />\r\n                    <JoinRoom getUsername={getUserName} globalUserName={userName} />\r\n                    {roomId && <LeaveRoom globalUserName={userName} />}\r\n                </ButtonGroup>\r\n            </div>\r\n            {roomId ?\r\n                <div className='roomCount'>\r\n                    Current Room ID: {roomId}\r\n                    <div className='share'>\r\n                        <EmailShareButton subject={`${userName} wants you to join their chat room!`} url={window.location.href} >\r\n                            <EmailIcon size='32' round />\r\n                        </EmailShareButton>\r\n                        <FacebookShareButton\r\n                            url={window.location.href}\r\n                        >\r\n                            <FacebookIcon size='32' round />\r\n                        </FacebookShareButton>\r\n\r\n                        <TwitterShareButton\r\n                            url={window.location.href}\r\n                        >\r\n                            <TwitterIcon size={32} round />\r\n                        </TwitterShareButton>\r\n                    </div >\r\n                </div> : `Not in room`}\r\n        </Nav>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from 'react'\r\nimport './MessageDisplayer.css'\r\n\r\n\r\nfunction MessageDisplayer({message} : {message:string}) {\r\n\r\n    return (\r\n        <div className='messageContainer'>\r\n            {\r\n                message.split('\\n').map((value) => {\r\n                    return <p className='messageLine'>{value}</p>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MessageDisplayer","import './Display.css'\r\nimport React, { useEffect, useState } from 'react'\r\nimport  MessageDisplayer  from \"./MessageDisplayer/MessageDisplayer\";\r\n\r\nfunction Display({ ws }: { ws: WebSocket | undefined}) {\r\n\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        if (ws){\r\n            ws.onmessage = (event) => {\r\n                setMessage(`${message}\\n${event.data}`)\r\n            }\r\n        }\r\n        else{\r\n            setMessage('')\r\n        }\r\n    },[ws, message])\r\n\r\n    return (\r\n        <div className='display'>\r\n            <MessageDisplayer message={message}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display","import React, { useState } from 'react';\r\nimport './Input.css'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nfunction Input({ ws, userName }: { ws: WebSocket | undefined, userName:string }) {\r\n\r\n\r\n    const inputRef = React.createRef<HTMLInputElement>()\r\n\r\n    return (\r\n        <div className='input'>\r\n            <input ref={inputRef} className='messageInput' type='text' placeholder='type message here'/>\r\n            <Button className='sendButton' onClick={(event) => {sendToServer(ws,event)}}>Send</Button>\r\n        </div>\r\n    )\r\n\r\n    function sendToServer(ws: WebSocket | undefined, event:any) {\r\n        if(inputRef.current){\r\n            ws?.send(`${userName}: ${inputRef.current?.value}`)\r\n            inputRef.current.value = ''\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default Input","import React, { useState, useEffect, createRef } from 'react'\r\nimport Display from \"./Display/Display\";\r\nimport Input from \"./Input/Input\";\r\nimport './Chat.css'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Axios from 'axios';\r\n\r\n\r\nfunction Chat({ userName, getUserName }: { userName: string, getUserName: Function }) {\r\n\r\n    const { roomId } = useParams()\r\n    const [ws, setWs] = useState<WebSocket>()\r\n    const [IDTracker, setID] = useState(-1)\r\n    const history = useHistory()\r\n\r\n    const handleClose = () => history.push('/')\r\n    const handleSubmit = () => { getUserName(inputRef.current?.value) }\r\n    const inputRef = createRef<HTMLInputElement>()\r\n\r\n    useEffect(() => {\r\n        if (roomId && IDTracker !== roomId && userName) {\r\n            setID(roomId)\r\n            var HOST = window.location.href.replace(/^http/, 'ws')\r\n            console.log(HOST)\r\n\r\n            //Make sure user has been added to room on backend. If they use the join room button, this should be done. If they join from url, they need to be added\r\n            setWs(new WebSocket(`${HOST}?userName=${userName}`))\r\n            const userRoom = Axios.post(`${process.env.REACT_APP_API_URL}/getRoomByUser`, {\r\n                user: { username: userName }\r\n            }).then(({ data }) => {\r\n                if (!data) {\r\n                    Axios.post(`${process.env.REACT_APP_API_URL}/joinRoom/${roomId}`,\r\n                        {\r\n                            user: {\r\n                                username: userName\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n            }).catch((err) => {\r\n                console.error(err)\r\n            })\r\n\r\n            //On destroy, close server connection\r\n            if (ws)\r\n                return function cleanup() { ws.close() }\r\n        }\r\n        else if (!roomId && ws) {\r\n            //close connection\r\n            console.log(\"closing connection\")\r\n            ws?.close(1000, userName);\r\n            setWs(undefined)\r\n        }\r\n    }, [roomId, IDTracker, ws, userName]);\r\n\r\n\r\n    if (userName || !roomId) {\r\n        return (\r\n            <div className='chat'>\r\n                <Display ws={ws} />\r\n                <Input ws={ws} userName={userName} />\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Modal show={true} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create username</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    <input ref={inputRef} type='text' placeholder='Enter username' />\r\n                </Modal.Body>\r\n\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                </Button>\r\n                    <Button variant=\"primary\" type='submit' onClick={() => handleSubmit()}>\r\n                        Join\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Chat","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport NavBar from '../Nav/Nav'\nimport Chat from '../Chat/Chat'\nimport {\n  BrowserRouter as Router,\n  Route\n} from \"react-router-dom\";\nimport axios from 'axios'\n\n\n\n\nfunction App() {\n\n  const cachedUserName = sessionStorage.getItem('userName') || ''\n  const [userName, setUserName] = useState(cachedUserName)\n\n  const getUserName = (userName: string) => {\n    console.log(\"Chanigna app state username to\", userName)\n    setUserName(userName)\n    sessionStorage.setItem('userName', userName)\n  }\n\n\n  useEffect(() => {\n    //Leave the room when you close the window\n    window.addEventListener(\"beforeunload\", (ev) => {\n      ev.preventDefault();\n      ev.returnValue = ''\n      axios.post(`${process.env.REACT_APP_API_URL}/leaveRoom`,\n        {\n          user: {\n            username: userName\n          }\n        }\n      )\n    });\n\n  })\n\n\n\n  return (\n    <Router>\n      <Route path={['/:roomId', '']} >\n        <NavBar getUserName={getUserName} userName={userName} />\n        <Chat userName={userName} getUserName={getUserName} />\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App  from './components/App/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}